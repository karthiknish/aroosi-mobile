import React, { useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ScrollView, ViewStyle } from 'react-native';\nimport { usePerformanceMonitoring } from '../../hooks/useMessagingPerformance';\nimport { PerformanceMetrics } from '../../utils/messagingPerformanceOptimizer';\n\ninterface PerformanceMonitorProps {\n  showDetails?: boolean;\n  showRecommendations?: boolean;\n  style?: ViewStyle;\n  collapsible?: boolean;\n}\n\nexport function PerformanceMonitor({\n  showDetails = true,\n  showRecommendations = true,\n  style,\n  collapsible = true\n}: PerformanceMonitorProps) {\n  const { metrics, recommendations, cacheStats } = usePerformanceMonitoring();\n  const [isExpanded, setIsExpanded] = useState(false);\n  \n  const formatBytes = (bytes: number): string => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n  \n  const formatPercentage = (value: number): string => {\n    return (value * 100).toFixed(1) + '%';\n  };\n  \n  const formatTime = (ms: number): string => {\n    if (ms < 1000) {\n      return ms.toFixed(0) + 'ms';\n    }\n    return (ms / 1000).toFixed(1) + 's';\n  };\n  \n  const getPerformanceColor = (metric: keyof PerformanceMetrics, value: number): string => {\n    switch (metric) {\n      case 'cacheHitRate':\n        if (value > 0.8) return '#4CAF50';\n        if (value > 0.6) return '#FF9800';\n        return '#F44336';\n      case 'averageLoadTime':\n        if (value < 1000) return '#4CAF50';\n        if (value < 2000) return '#FF9800';\n        return '#F44336';\n      case 'averageOptimisticConfirmTime':\n        if (value < 2000) return '#4CAF50';\n        if (value < 5000) return '#FF9800';\n        return '#F44336';\n      default:\n        return '#666';\n    }\n  };\n  \n  const renderMetricItem = (label: string, value: string | number, metric?: keyof PerformanceMetrics) => {\n    const color = metric ? getPerformanceColor(metric, typeof value === 'number' ? value : 0) : '#666';\n    \n    return (\n      <View style={styles.metricItem} key={label}>\n        <Text style={styles.metricLabel}>{label}</Text>\n        <Text style={[styles.metricValue, { color }]}>{value}</Text>\n      </View>\n    );\n  };\n  \n  const renderSummary = () => (\n    <View style={styles.summary}>\n      <Text style={styles.summaryTitle}>Performance Summary</Text>\n      <View style={styles.summaryMetrics}>\n        {renderMetricItem('Cache Hit Rate', formatPercentage(metrics.cacheHitRate), 'cacheHitRate')}\n        {renderMetricItem('Avg Load Time', formatTime(metrics.averageLoadTime), 'averageLoadTime')}\n        {renderMetricItem('Memory Usage', formatBytes(metrics.memoryUsage))}\n      </View>\n    </View>\n  );\n  \n  const renderDetailedMetrics = () => (\n    <View style={styles.detailedMetrics}>\n      <Text style={styles.sectionTitle}>Detailed Metrics</Text>\n      <View style={styles.metricsGrid}>\n        {renderMetricItem('API Calls', metrics.apiCallCount.toString())}\n        {renderMetricItem('Cache Hits', metrics.cacheHits.toString())}\n        {renderMetricItem('Cache Misses', metrics.cacheMisses.toString())}\n        {renderMetricItem('Optimistic Updates', metrics.optimisticUpdates.toString())}\n        {renderMetricItem('Failed Updates', metrics.failedOptimisticUpdates.toString())}\n        {renderMetricItem('Avg Confirm Time', formatTime(metrics.averageOptimisticConfirmTime), 'averageOptimisticConfirmTime')}\n      </View>\n    </View>\n  );\n  \n  const renderCacheStats = () => {\n    if (!cacheStats) return null;\n    \n    return (\n      <View style={styles.cacheStats}>\n        <Text style={styles.sectionTitle}>Cache Statistics</Text>\n        <View style={styles.metricsGrid}>\n          {renderMetricItem('Cached Conversations', cacheStats.size.toString())}\n          {renderMetricItem('Max Conversations', cacheStats.maxSize.toString())}\n          {renderMetricItem('Total Messages', cacheStats.totalMessages.toString())}\n          {renderMetricItem('Cache Utilization', formatPercentage(cacheStats.size / cacheStats.maxSize))}\n        </View>\n      </View>\n    );\n  };\n  \n  const renderRecommendations = () => {\n    if (!showRecommendations || recommendations.length === 0) return null;\n    \n    return (\n      <View style={styles.recommendations}>\n        <Text style={styles.sectionTitle}>Performance Recommendations</Text>\n        {recommendations.map((recommendation, index) => (\n          <View key={index} style={styles.recommendationItem}>\n            <Text style={styles.recommendationIcon}>ðŸ’¡</Text>\n            <Text style={styles.recommendationText}>{recommendation}</Text>\n          </View>\n        ))}\n      </View>\n    );\n  };\n  \n  if (collapsible && !isExpanded) {\n    return (\n      <TouchableOpacity \n        style={[styles.container, styles.collapsed, style]} \n        onPress={() => setIsExpanded(true)}\n      >\n        <View style={styles.collapsedContent}>\n          <Text style={styles.collapsedTitle}>Performance Monitor</Text>\n          <View style={styles.collapsedMetrics}>\n            <Text style={[styles.collapsedMetric, { color: getPerformanceColor('cacheHitRate', metrics.cacheHitRate) }]}>\n              {formatPercentage(metrics.cacheHitRate)} hit rate\n            </Text>\n            <Text style={[styles.collapsedMetric, { color: getPerformanceColor('averageLoadTime', metrics.averageLoadTime) }]}>\n              {formatTime(metrics.averageLoadTime)} avg\n            </Text>\n          </View>\n        </View>\n        <Text style={styles.expandIcon}>â–¼</Text>\n      </TouchableOpacity>\n    );\n  }\n  \n  return (\n    <View style={[styles.container, style]}>\n      {collapsible && (\n        <TouchableOpacity \n          style={styles.header} \n          onPress={() => setIsExpanded(false)}\n        >\n          <Text style={styles.headerTitle}>Performance Monitor</Text>\n          <Text style={styles.collapseIcon}>â–²</Text>\n        </TouchableOpacity>\n      )}\n      \n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {renderSummary()}\n        {showDetails && renderDetailedMetrics()}\n        {renderCacheStats()}\n        {renderRecommendations()}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f8f9fa',\n    borderRadius: 8,\n    margin: 8,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  collapsed: {\n    padding: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  collapsedContent: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  collapsedTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#333',\n  },\n  collapsedMetrics: {\n    flexDirection: 'row',\n    marginLeft: 12,\n  },\n  collapsedMetric: {\n    fontSize: 12,\n    fontWeight: '500',\n    marginLeft: 8,\n  },\n  expandIcon: {\n    fontSize: 12,\n    color: '#666',\n    marginLeft: 8,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e0e0e0',\n  },\n  headerTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#333',\n  },\n  collapseIcon: {\n    fontSize: 12,\n    color: '#666',\n  },\n  content: {\n    maxHeight: 400,\n  },\n  summary: {\n    padding: 12,\n  },\n  summaryTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#333',\n    marginBottom: 8,\n  },\n  summaryMetrics: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  sectionTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#333',\n    marginBottom: 8,\n  },\n  detailedMetrics: {\n    padding: 12,\n    borderTopWidth: 1,\n    borderTopColor: '#e0e0e0',\n  },\n  cacheStats: {\n    padding: 12,\n    borderTopWidth: 1,\n    borderTopColor: '#e0e0e0',\n  },\n  metricsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  },\n  metricItem: {\n    width: '48%',\n    marginBottom: 8,\n  },\n  metricLabel: {\n    fontSize: 12,\n    color: '#666',\n    marginBottom: 2,\n  },\n  metricValue: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  recommendations: {\n    padding: 12,\n    borderTopWidth: 1,\n    borderTopColor: '#e0e0e0',\n  },\n  recommendationItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    marginBottom: 8,\n  },\n  recommendationIcon: {\n    fontSize: 16,\n    marginRight: 8,\n    marginTop: 2,\n  },\n  recommendationText: {\n    flex: 1,\n    fontSize: 12,\n    color: '#666',\n    lineHeight: 16,\n  },\n});\n\nexport default PerformanceMonitor;"