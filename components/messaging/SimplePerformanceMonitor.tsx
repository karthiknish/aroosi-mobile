import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { usePerformanceMonitoring } from '../../hooks/useMessagingPerformance';\n\ninterface SimplePerformanceMonitorProps {\n  /**\n   * Custom styling\n   */\n  style?: any;\n}\n\n/**\n * Simple component for displaying basic performance metrics\n */\nexport function SimplePerformanceMonitor({ style }: SimplePerformanceMonitorProps) {\n  const { metrics, recommendations, cacheStats } = usePerformanceMonitoring();\n  \n  const formatBytes = (bytes: number): string => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n  \n  const formatPercentage = (value: number): string => {\n    return (value * 100).toFixed(1) + '%';\n  };\n  \n  const formatTime = (ms: number): string => {\n    if (ms < 1000) {\n      return ms.toFixed(0) + 'ms';\n    }\n    return (ms / 1000).toFixed(1) + 's';\n  };\n  \n  return (\n    <View style={[styles.container, style]}>\n      <Text style={styles.title}>Performance Monitor</Text>\n      \n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Key Metrics</Text>\n        <Text style={styles.metric}>Cache Hit Rate: {formatPercentage(metrics.cacheHitRate)}</Text>\n        <Text style={styles.metric}>Avg Load Time: {formatTime(metrics.averageLoadTime)}</Text>\n        <Text style={styles.metric}>Memory Usage: {formatBytes(metrics.memoryUsage)}</Text>\n        <Text style={styles.metric}>API Calls: {metrics.apiCallCount}</Text>\n      </View>\n      \n      {cacheStats && (\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Cache Stats</Text>\n          <Text style={styles.metric}>Conversations: {cacheStats.size}/{cacheStats.maxSize}</Text>\n          <Text style={styles.metric}>Total Messages: {cacheStats.totalMessages}</Text>\n        </View>\n      )}\n      \n      {recommendations.length > 0 && (\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Recommendations</Text>\n          {recommendations.slice(0, 3).map((rec, index) => (\n            <Text key={index} style={styles.recommendation}>â€¢ {rec}</Text>\n          ))}\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    padding: 12,\n    margin: 8,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#ddd',\n  },\n  title: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 8,\n    color: '#333',\n  },\n  section: {\n    marginBottom: 12,\n  },\n  sectionTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 4,\n    color: '#555',\n  },\n  metric: {\n    fontSize: 12,\n    color: '#666',\n    marginBottom: 2,\n  },\n  recommendation: {\n    fontSize: 11,\n    color: '#777',\n    marginBottom: 2,\n    paddingLeft: 8,\n  },\n});\n\nexport default SimplePerformanceMonitor;"