import React, { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ScrollView, Alert } from 'react-native';\nimport { \n  useMessagingPerformance, \n  usePerformanceMonitoring, \n  useOptimisticMessages \n} from '../hooks/useMessagingPerformance';\nimport { SimplePerformanceMonitor } from '../components/messaging/SimplePerformanceMonitor';\nimport { runQuickPerformanceBenchmark } from '../utils/messagingPerformanceTester';\nimport { Message } from '../types/message';\n\n/**\n * Example component demonstrating performance optimization features\n */\nexport function PerformanceOptimizationExample() {\n  const {\n    loadMessagesOptimized,\n    sendMessageOptimistic,\n    performanceMetrics,\n    performanceRecommendations,\n    preloadRecentConversations,\n    resetMetrics\n  } = useMessagingPerformance();\n  \n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [testResults, setTestResults] = useState<any>(null);\n  const conversationId = 'example-conversation';\n  const userId = 'user-1';\n  const partnerId = 'user-2';\n  \n  // Load messages with optimization\n  const loadMessages = async () => {\n    setIsLoading(true);\n    try {\n      const msgs = await loadMessagesOptimized(conversationId, {\n        useCache: true,\n        batchKey: 'example-messages'\n      });\n      setMessages(msgs);\n    } catch (error) {\n      console.error('Failed to load messages:', error);\n      Alert.alert('Error', 'Failed to load messages');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Send optimistic message\n  const sendMessage = async (text: string) => {\n    try {\n      const message = await sendMessageOptimistic({\n        conversationId,\n        fromUserId: userId,\n        toUserId: partnerId,\n        text,\n        type: 'text'\n      });\n      \n      // Update local messages\n      setMessages(prev => [...prev, message]);\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      Alert.alert('Error', 'Failed to send message');\n    }\n  };\n  \n  // Run performance benchmark\n  const runBenchmark = async () => {\n    try {\n      const results = await runQuickPerformanceBenchmark();\n      setTestResults(results);\n      Alert.alert(\n        'Benchmark Results',\n        `Performance Score: ${results.performanceScore.toFixed(1)}/100\\n` +\n        `Cache Hit Rate: ${(results.cacheResults?.hitRate * 100 || 0).toFixed(1)}%\\n` +\n        `Memory Growth: ${(results.memoryResults.memoryGrowth / 1024).toFixed(1)}KB`\n      );\n    } catch (error) {\n      console.error('Benchmark failed:', error);\n      Alert.alert('Error', 'Benchmark failed');\n    }\n  };\n  \n  // Preload conversations on mount\n  useEffect(() => {\n    const preload = async () => {\n      try {\n        await preloadRecentConversations(['conv-1', 'conv-2', 'conv-3']);\n      } catch (error) {\n        console.warn('Failed to preload conversations:', error);\n      }\n    };\n    preload();\n  }, [preloadRecentConversations]);\n  \n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Performance Optimization Example</Text>\n      \n      {/* Performance Monitor */}\n      <SimplePerformanceMonitor style={styles.monitor} />\n      \n      {/* Action Buttons */}\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity \n          style={styles.button} \n          onPress={loadMessages}\n          disabled={isLoading}\n        >\n          <Text style={styles.buttonText}>\n            {isLoading ? 'Loading...' : 'Load Messages (Optimized)'}\n          </Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity \n          style={styles.button} \n          onPress={() => sendMessage(`Test message ${Date.now()}`)}\n        >\n          <Text style={styles.buttonText}>Send Optimistic Message</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity \n          style={styles.button} \n          onPress={runBenchmark}\n        >\n          <Text style={styles.buttonText}>Run Performance Benchmark</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity \n          style={[styles.button, styles.secondaryButton]} \n          onPress={resetMetrics}\n        >\n          <Text style={[styles.buttonText, styles.secondaryButtonText]}>Reset Metrics</Text>\n        </TouchableOpacity>\n      </View>\n      \n      {/* Performance Metrics Display */}\n      <View style={styles.metricsContainer}>\n        <Text style={styles.sectionTitle}>Current Metrics</Text>\n        <Text style={styles.metric}>Cache Hit Rate: {(performanceMetrics.cacheHitRate * 100).toFixed(1)}%</Text>\n        <Text style={styles.metric}>Average Load Time: {performanceMetrics.averageLoadTime.toFixed(0)}ms</Text>\n        <Text style={styles.metric}>API Calls: {performanceMetrics.apiCallCount}</Text>\n        <Text style={styles.metric}>Optimistic Updates: {performanceMetrics.optimisticUpdates}</Text>\n        <Text style={styles.metric}>Failed Updates: {performanceMetrics.failedOptimisticUpdates}</Text>\n      </View>\n      \n      {/* Recommendations */}\n      {performanceRecommendations.length > 0 && (\n        <View style={styles.recommendationsContainer}>\n          <Text style={styles.sectionTitle}>Recommendations</Text>\n          {performanceRecommendations.map((rec, index) => (\n            <Text key={index} style={styles.recommendation}>â€¢ {rec}</Text>\n          ))}\n        </View>\n      )}\n      \n      {/* Messages Display */}\n      <View style={styles.messagesContainer}>\n        <Text style={styles.sectionTitle}>Messages ({messages.length})</Text>\n        {messages.slice(-5).map((message, index) => (\n          <View key={message._id || index} style={styles.messageItem}>\n            <Text style={styles.messageText}>{message.text}</Text>\n            <Text style={styles.messageStatus}>Status: {message.status || 'sent'}</Text>\n          </View>\n        ))}\n      </View>\n      \n      {/* Test Results */}\n      {testResults && (\n        <View style={styles.testResultsContainer}>\n          <Text style={styles.sectionTitle}>Last Benchmark Results</Text>\n          <Text style={styles.metric}>Performance Score: {testResults.performanceScore.toFixed(1)}/100</Text>\n          <Text style={styles.metric}>Duration: {testResults.duration}ms</Text>\n          {testResults.cacheResults && (\n            <Text style={styles.metric}>Cache Hit Rate: {(testResults.cacheResults.hitRate * 100).toFixed(1)}%</Text>\n          )}\n          {testResults.memoryResults && (\n            <Text style={styles.metric}>Memory Growth: {(testResults.memoryResults.memoryGrowth / 1024).toFixed(1)}KB</Text>\n          )}\n        </View>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    padding: 16,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n    textAlign: 'center',\n    color: '#333',\n  },\n  monitor: {\n    marginBottom: 16,\n  },\n  buttonContainer: {\n    marginBottom: 16,\n  },\n  button: {\n    backgroundColor: '#007AFF',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 8,\n    alignItems: 'center',\n  },\n  secondaryButton: {\n    backgroundColor: '#fff',\n    borderWidth: 1,\n    borderColor: '#007AFF',\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  secondaryButtonText: {\n    color: '#007AFF',\n  },\n  metricsContainer: {\n    backgroundColor: '#f8f9fa',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 16,\n  },\n  recommendationsContainer: {\n    backgroundColor: '#fff3cd',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: '#ffeaa7',\n  },\n  messagesContainer: {\n    backgroundColor: '#f8f9fa',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 16,\n  },\n  testResultsContainer: {\n    backgroundColor: '#d4edda',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: '#c3e6cb',\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 8,\n    color: '#333',\n  },\n  metric: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 4,\n  },\n  recommendation: {\n    fontSize: 13,\n    color: '#856404',\n    marginBottom: 4,\n  },\n  messageItem: {\n    backgroundColor: '#fff',\n    padding: 8,\n    borderRadius: 4,\n    marginBottom: 4,\n    borderWidth: 1,\n    borderColor: '#e0e0e0',\n  },\n  messageText: {\n    fontSize: 14,\n    color: '#333',\n    marginBottom: 2,\n  },\n  messageStatus: {\n    fontSize: 12,\n    color: '#666',\n    fontStyle: 'italic',\n  },\n});\n\nexport default PerformanceOptimizationExample;"