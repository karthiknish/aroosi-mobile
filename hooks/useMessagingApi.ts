import { useCallback } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { ApiResponse, MessagingAPI } from '../types/messaging';\nimport { Message } from '../types/message';\nimport { unifiedMessagingApi } from '../utils/unifiedMessagingApi';\n\n/**\n * Hook for accessing the messaging API\n */\nexport function useMessagingApi(): MessagingAPI {\n  const { getToken } = useAuth();\n  \n  /**\n   * Get messages for a conversation\n   */\n  const getMessages = useCallback(async (\n    conversationId: string,\n    options?: {\n      limit?: number;\n      before?: number;\n      after?: number;\n    }\n  ): Promise<ApiResponse<Message[]>> => {\n    try {\n      const token = await getToken();\n      return await unifiedMessagingApi.getMessages(token, conversationId, options);\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: 'API_ERROR',\n          message: error.message || 'Failed to get messages'\n        }\n      };\n    }\n  }, [getToken]);\n  \n  /**\n   * Send a message\n   */\n  const sendMessage = useCallback(async (\n    messageData: {\n      conversationId: string;\n      fromUserId: string;\n      toUserId: string;\n      text?: string;\n      type: 'text' | 'voice' | 'image';\n      audioStorageId?: string;\n      imageStorageId?: string;\n      duration?: number;\n      fileSize?: number;\n      mimeType?: string;\n    }\n  ): Promise<ApiResponse<Message>> => {\n    try {\n      const token = await getToken();\n      return await unifiedMessagingApi.sendMessage(token, messageData);\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: 'API_ERROR',\n          message: error.message || 'Failed to send message'\n        }\n      };\n    }\n  }, [getToken]);\n  \n  /**\n   * Mark a conversation as read\n   */\n  const markConversationAsRead = useCallback(async (\n    conversationId: string\n  ): Promise<ApiResponse<void>> => {\n    try {\n      const token = await getToken();\n      return await unifiedMessagingApi.markConversationAsRead(token, conversationId);\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: 'API_ERROR',\n          message: error.message || 'Failed to mark conversation as read'\n        }\n      };\n    }\n  }, [getToken]);\n  \n  /**\n   * Generate a voice message upload URL\n   */\n  const generateVoiceUploadUrl = useCallback(async (): Promise<ApiResponse<{\n    uploadUrl: string;\n    storageId: string;\n  }>> => {\n    try {\n      const token = await getToken();\n      return await unifiedMessagingApi.generateVoiceUploadUrl(token);\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: 'API_ERROR',\n          message: error.message || 'Failed to generate voice upload URL'\n        }\n      };\n    }\n  }, [getToken]);\n  \n  /**\n   * Get a voice message URL\n   */\n  const getVoiceMessageUrl = useCallback(async (\n    storageId: string\n  ): Promise<ApiResponse<{ url: string }>> => {\n    try {\n      const token = await getToken();\n      return await unifiedMessagingApi.getVoiceMessageUrl(token, storageId);\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: 'API_ERROR',\n          message: error.message || 'Failed to get voice message URL'\n        }\n      };\n    }\n  }, [getToken]);\n  \n  /**\n   * Get conversations\n   */\n  const getConversations = useCallback(async (\n    options?: {\n      limit?: number;\n      before?: number;\n    }\n  ): Promise<ApiResponse<any[]>> => {\n    try {\n      const token = await getToken();\n      return await unifiedMessagingApi.getConversations(token, options);\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: 'API_ERROR',\n          message: error.message || 'Failed to get conversations'\n        }\n      };\n    }\n  }, [getToken]);\n  \n  /**\n   * Create a conversation\n   */\n  const createConversation = useCallback(async (\n    userId: string\n  ): Promise<ApiResponse<any>> => {\n    try {\n      const token = await getToken();\n      return await unifiedMessagingApi.createConversation(token, userId);\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: 'API_ERROR',\n          message: error.message || 'Failed to create conversation'\n        }\n      };\n    }\n  }, [getToken]);\n  \n  /**\n   * Send typing indicator\n   */\n  const sendTypingIndicator = useCallback(async (\n    conversationId: string,\n    action: 'start' | 'stop'\n  ): Promise<void> => {\n    try {\n      const token = await getToken();\n      await unifiedMessagingApi.sendTypingIndicator(token, conversationId, action);\n    } catch (error) {\n      console.warn('Failed to send typing indicator:', error);\n    }\n  }, [getToken]);\n  \n  /**\n   * Send delivery receipt\n   */\n  const sendDeliveryReceipt = useCallback(async (\n    messageId: string,\n    status: string\n  ): Promise<void> => {\n    try {\n      const token = await getToken();\n      await unifiedMessagingApi.sendDeliveryReceipt(token, messageId, status);\n    } catch (error) {\n      console.warn('Failed to send delivery receipt:', error);\n    }\n  }, [getToken]);\n  \n  return {\n    getMessages,\n    sendMessage,\n    markConversationAsRead,\n    generateVoiceUploadUrl,\n    getVoiceMessageUrl,\n    getConversations,\n    createConversation,\n    sendTypingIndicator,\n    sendDeliveryReceipt\n  };\n}"