name: Build and Deploy Aroosi Mobile

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  EXPO_CLI_VERSION: 'latest'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run unit tests
        run: npm run test -- --coverage --watchAll=false
        
      - name: Run integration tests
        run: npm run test:integration -- --watchAll=false
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: aroosi-mobile-coverage
          
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=high
        
      - name: Run dependency vulnerability scan
        run: npx audit-ci --config audit-ci.json
        
  build-preview:
    name: Build Preview
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Expo CLI
        run: npm install -g @expo/cli@${{ env.EXPO_CLI_VERSION }}
        
      - name: Install dependencies
        run: npm ci
        
      - name: Setup environment variables
        run: |
          echo "EXPO_PUBLIC_API_URL=${{ secrets.STAGING_API_URL }}" >> .env
          echo "EXPO_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "EXPO_PUBLIC_ONESIGNAL_APP_ID=${{ secrets.ONESIGNAL_APP_ID }}" >> .env
          echo "EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY_TEST }}" >> .env
          
      - name: Build for preview
        run: expo build:web --no-pwa
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: preview-build
          path: web-build/
          retention-days: 7
          
  build-staging:
    name: Build Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Expo CLI
        run: npm install -g @expo/cli@${{ env.EXPO_CLI_VERSION }}
        
      - name: Install dependencies
        run: npm ci
        
      - name: Setup staging environment
        run: |
          echo "EXPO_PUBLIC_API_URL=${{ secrets.STAGING_API_URL }}" >> .env
          echo "EXPO_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "EXPO_PUBLIC_ONESIGNAL_APP_ID=${{ secrets.ONESIGNAL_APP_ID_STAGING }}" >> .env
          echo "EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY_TEST }}" >> .env
          echo "EXPO_PUBLIC_SENTRY_DSN=${{ secrets.SENTRY_DSN_STAGING }}" >> .env
          
      - name: Build for staging
        run: |
          expo build:android --type=apk --release-channel=staging
          expo build:ios --type=archive --release-channel=staging
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          
      - name: Upload staging builds
        uses: actions/upload-artifact@v3
        with:
          name: staging-builds
          path: |
            *.apk
            *.ipa
          retention-days: 30
          
  build-production:
    name: Build Production
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Expo CLI
        run: npm install -g @expo/cli@${{ env.EXPO_CLI_VERSION }}
        
      - name: Install dependencies
        run: npm ci
        
      - name: Setup production environment
        run: |
          echo "EXPO_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}" >> .env
          echo "EXPO_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "EXPO_PUBLIC_ONESIGNAL_APP_ID=${{ secrets.ONESIGNAL_APP_ID_PRODUCTION }}" >> .env
          echo "EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY_LIVE }}" >> .env
          echo "EXPO_PUBLIC_SENTRY_DSN=${{ secrets.SENTRY_DSN_PRODUCTION }}" >> .env
          
      - name: Build for production
        run: |
          expo build:android --type=app-bundle --release-channel=production
          expo build:ios --type=archive --release-channel=production
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          
      - name: Upload production builds
        uses: actions/upload-artifact@v3
        with:
          name: production-builds
          path: |
            *.aab
            *.ipa
          retention-days: 90
          
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-staging
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Expo CLI
        run: npm install -g @expo/cli@${{ env.EXPO_CLI_VERSION }}
        
      - name: Download staging builds
        uses: actions/download-artifact@v3
        with:
          name: staging-builds
          
      - name: Deploy to Expo
        run: expo publish --release-channel=staging
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          
      - name: Deploy to TestFlight (iOS)
        if: success()
        run: |
          # Upload to TestFlight using fastlane or similar tool
          echo "Deploying iOS build to TestFlight..."
          # fastlane ios beta
          
      - name: Deploy to Google Play Internal Testing (Android)
        if: success()
        run: |
          # Upload to Google Play Internal Testing
          echo "Deploying Android build to Google Play Internal Testing..."
          # fastlane android internal
          
      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#mobile-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-production
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Expo CLI
        run: npm install -g @expo/cli@${{ env.EXPO_CLI_VERSION }}
        
      - name: Download production builds
        uses: actions/download-artifact@v3
        with:
          name: production-builds
          
      - name: Deploy to Expo
        run: expo publish --release-channel=production
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          
      - name: Submit to App Store (iOS)
        if: success()
        run: |
          # Submit to App Store for review
          echo "Submitting iOS build to App Store..."
          # expo upload:ios --latest
          
      - name: Submit to Google Play (Android)
        if: success()
        run: |
          # Submit to Google Play for review
          echo "Submitting Android build to Google Play..."
          # expo upload:android --latest
          
      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            - Automated release from main branch
            - Build number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
          draft: false
          prerelease: false
          
      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#mobile-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run performance tests
        run: npm run test:performance
        
      - name: Generate performance report
        run: npm run performance:report
        
      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report/
          retention-days: 30
          
  accessibility-test:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: build-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run accessibility tests
        run: npm run test:accessibility
        
      - name: Generate accessibility report
        run: npm run accessibility:report
        
      - name: Upload accessibility report
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-report
          path: accessibility-report/
          retention-days: 30
          
  final-validation:
    name: Final Integration Validation
    runs-on: ubuntu-latest
    needs: [build-staging, performance-test, accessibility-test]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run final validation tests
        run: npm run test:final-validation
        env:
          TEST_API_URL: ${{ secrets.STAGING_API_URL }}
          TEST_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          
      - name: Generate final validation report
        run: npm run validation:report
        
      - name: Upload validation report
        uses: actions/upload-artifact@v3
        with:
          name: final-validation-report
          path: validation-report/
          retention-days: 30
          
      - name: Post validation summary
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './validation-report/summary.json';
            
            if (fs.existsSync(path)) {
              const summary = JSON.parse(fs.readFileSync(path, 'utf8'));
              
              const comment = `## 🧪 Final Validation Results
              
              **Overall Status:** ${summary.success ? '✅ PASSED' : '❌ FAILED'}
              
              ### Test Results
              - **User Journey Tests:** ${summary.userJourney.passed}/${summary.userJourney.total}
              - **Data Synchronization:** ${summary.dataSync.passed}/${summary.dataSync.total}
              - **Premium Features:** ${summary.premiumFeatures.passed}/${summary.premiumFeatures.total}
              - **Real-time Features:** ${summary.realtime.passed}/${summary.realtime.total}
              - **Performance Tests:** ${summary.performance.passed}/${summary.performance.total}
              - **Security Tests:** ${summary.security.passed}/${summary.security.total}
              
              ### Performance Metrics
              - **API Response Time:** ${summary.metrics.apiResponseTime}ms
              - **Screen Load Time:** ${summary.metrics.screenLoadTime}ms
              - **Memory Usage:** ${summary.metrics.memoryUsage}%
              
              ${summary.success ? '🎉 All validation tests passed! Ready for deployment.' : '⚠️ Some validation tests failed. Please review the detailed report.'}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
            
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, final-validation]
    if: always()
    
    steps:
      - name: Clean up old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
              const createdAt = new Date(artifact.created_at);
              const thirtyDaysAgo = new Date();
              thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
              return createdAt < thirtyDaysAgo;
            });
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }