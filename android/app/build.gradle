apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
// Apply the Google services Gradle plugin for Firebase (conditionally for local builds)
def googleServicesJson = file('google-services.json')
if (googleServicesJson.exists()) {
    apply plugin: 'com.google.gms.google-services'
} else {
    logger.lifecycle("[android] google-services.json not found -> skipping Google Services plugin for this build")
}
// Apply Gradle Play Publisher plugin for Play Store automation
// Apply Gradle Play Publisher only when credentials are provided (avoid config cost locally)
def HAS_GPP_CREDS = System.getenv('ANDROID_PUBLISHER_CREDENTIALS') != null
if (HAS_GPP_CREDS) {
    apply plugin: 'com.github.triplet.play'
}

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()
// Local flag to speed up builds by targeting a single ABI (arm64-v8a)
// Default to single-ABI for Debug builds to reduce local compile time
def isDebugTask = gradle.startParameter.taskNames.any { it.toLowerCase().contains('debug') }
def localSingleAbi = (
    System.getenv('LOCAL_SINGLE_ABI') ?: (findProperty('LOCAL_SINGLE_ABI') ?: (isDebugTask ? "true" : "false"))
).toString().toBoolean()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Folders */
     //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")

    /* Variants */
    // Make sure we skip JS/asset bundling for debuggable variants to speed up debug builds
    debuggableVariants = ["debug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]

    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.aroosi.mobile'
    defaultConfig {
        applicationId 'com.aroosi.mobile'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 4
    versionName "1.0.3"
        // Build only ARM ABIs; allow single-ABI for faster local builds
        ndk {
            if (localSingleAbi) {
                abiFilters "arm64-v8a"
            } else {
                abiFilters "arm64-v8a", "armeabi-v7a"
            }
        }
    // Prefer the Play store flavor for libraries that define a 'store' dimension (e.g. react-native-iap)
    missingDimensionStrategy 'store', 'play'
    }
    // Upload keystore path (created in CI from a base64 secret)
    def uploadKeystoreFile = file('upload.keystore')
    def isReleaseBuild = gradle.startParameter.taskNames.any { it.toLowerCase().contains('release') }
    // Allow local debug signing fallback when explicitly enabled
    def allowLocalDebugSigning = (
        System.getenv('ALLOW_DEBUG_SIGNING_FOR_LOCAL') ?: findProperty('android.allowLocalDebugSigning') ?: "false"
    ).toString().toBoolean()
    // Try to load keystore credentials from local properties file when env vars are not set
    def keystoreProps = new Properties()
    def keystorePropsFile = file("keystore.properties")
    if (keystorePropsFile.exists()) {
        keystorePropsFile.withInputStream { stream -> keystoreProps.load(stream) }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (isReleaseBuild && !allowLocalDebugSigning) {
                if (!uploadKeystoreFile.exists()) {
                    throw new GradleException("Release keystore missing at ${uploadKeystoreFile}. Create 'android/app/upload.keystore' and set ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_PASSWORD.")
                }
                def storePass = System.getenv('ANDROID_KEYSTORE_PASSWORD') ?: keystoreProps.getProperty('storePassword')
                def keyAliasEnv = System.getenv('ANDROID_KEY_ALIAS') ?: keystoreProps.getProperty('keyAlias')
                def keyPass = System.getenv('ANDROID_KEY_PASSWORD') ?: keystoreProps.getProperty('keyPassword')
                if (!storePass || !keyAliasEnv || !keyPass) {
                    throw new GradleException("Missing signing credentials for release. Set env vars ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_PASSWORD or provide android/app/keystore.properties with storePassword,keyAlias,keyPassword.")
                }
                storeFile uploadKeystoreFile
                storePassword storePass
                keyAlias keyAliasEnv
                keyPassword keyPass
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Require release signing, unless explicit local debug-signing fallback is enabled
            if (allowLocalDebugSigning) {
                println "[build] Using DEBUG signing for release build (local fallback enabled)"
                signingConfig signingConfigs.debug
            } else {
                signingConfig signingConfigs.release
            }
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
            // Exclude simulator ABIs to avoid building/copying them
            excludes += [
                '**/x86/**',
                '**/x86_64/**'
            ]
        }
    }
    // Disable unused features to trim configuration and compile time
    buildFeatures {
        // React Native doesnâ€™t use these
        aidl false
        renderScript false
        shaders false
        // Keep buildConfig on (RN/Expo rely on it)
        buildConfig true
        // Leave viewBinding/compose off (not used)
        viewBinding false
        compose false
    }
    // Lint can be expensive locally; keep checks in CI
    lint {
        checkReleaseBuilds false
        abortOnError false
    }
    // PNG crunching is unnecessary for debug
    buildTypes {
        debug {
            crunchPngs false
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Configure Gradle Play Publisher
// Credentials: prefer environment variable ANDROID_PUBLISHER_CREDENTIALS with JSON key contents
// Track: publish to internal testing by default; default to App Bundles for Play
if (HAS_GPP_CREDS) {
    play {
        // Only enable GPP when credentials are present (e.g., on CI)
        enabled.set(true)
        defaultToAppBundles.set(true)
        track.set('internal')
        // Ensure completed release on internal track
        releaseStatus.set(com.github.triplet.gradle.androidpublisher.ReleaseStatus.COMPLETED)
        // Auto-increment versionCode to avoid conflicts on CI
        resolutionStrategy.set(com.github.triplet.gradle.androidpublisher.ResolutionStrategy.AUTO)
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Split option: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    // Trim all elements in place.
    for (i in 0..<options.size()) options[i] = options[i].trim();
    // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // Firebase BoM to align Firebase dependency versions
    implementation platform('com.google.firebase:firebase-bom:34.1.0')
    // Firebase Analytics (example; add others as needed)
    implementation 'com.google.firebase:firebase-analytics'
}
